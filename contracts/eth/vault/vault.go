// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vault

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VaultMetaData contains all meta data concerning the Vault contract.
var VaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Code501\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Code502\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"exception\",\"type\":\"bytes\"}],\"name\":\"remoteExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"addSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"blockApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"name\":\"createApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositNativeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAdminTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"appChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"callGasLimit\",\"type\":\"uint64\"}],\"name\":\"remoteCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"appChains\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"apps\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64[]\",\"name\":\"callGasLimits\",\"type\":\"uint64[]\"}],\"name\":\"remoteCallMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callerChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"remoteExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"callerChains\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"callers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"apps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"gasLimits\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"}],\"name\":\"remoteExecuteMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"removeSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retryTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retryTransferNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAppAnyCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAppWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setGlobalCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setNotPausedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferInMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferInNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dstChains\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferOutMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"}],\"name\":\"transferOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOutNonEvm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dstChains\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tos\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferOutNonEvmMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAppAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// VaultABI is the input ABI used to generate the binding from.
// Deprecated: Use VaultMetaData.ABI instead.
var VaultABI = VaultMetaData.ABI

// VaultBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VaultMetaData.Bin instead.
var VaultBin = VaultMetaData.Bin

// DeployVault deploys a new Ethereum contract, binding an instance of Vault to it.
func DeployVault(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Vault, error) {
	parsed, err := VaultMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VaultBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// Vault is an auto generated Go binding around an Ethereum contract.
type Vault struct {
	VaultCaller     // Read-only binding to the contract
	VaultTransactor // Write-only binding to the contract
	VaultFilterer   // Log filterer for contract events
}

// VaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type VaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VaultSession struct {
	Contract     *Vault            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VaultCallerSession struct {
	Contract *VaultCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VaultTransactorSession struct {
	Contract     *VaultTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type VaultRaw struct {
	Contract *Vault // Generic contract binding to access the raw methods on
}

// VaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VaultCallerRaw struct {
	Contract *VaultCaller // Generic read-only contract binding to access the raw methods on
}

// VaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VaultTransactorRaw struct {
	Contract *VaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVault creates a new instance of Vault, bound to a specific deployed contract.
func NewVault(address common.Address, backend bind.ContractBackend) (*Vault, error) {
	contract, err := bindVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// NewVaultCaller creates a new read-only instance of Vault, bound to a specific deployed contract.
func NewVaultCaller(address common.Address, caller bind.ContractCaller) (*VaultCaller, error) {
	contract, err := bindVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VaultCaller{contract: contract}, nil
}

// NewVaultTransactor creates a new write-only instance of Vault, bound to a specific deployed contract.
func NewVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*VaultTransactor, error) {
	contract, err := bindVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VaultTransactor{contract: contract}, nil
}

// NewVaultFilterer creates a new log filterer instance of Vault, bound to a specific deployed contract.
func NewVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*VaultFilterer, error) {
	contract, err := bindVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VaultFilterer{contract: contract}, nil
}

// bindVault binds a generic wrapper to an already deployed contract.
func bindVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VaultMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.VaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transact(opts, method, params...)
}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultCaller) DELAY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "DELAY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultSession) DELAY() (*big.Int, error) {
	return _Vault.Contract.DELAY(&_Vault.CallOpts)
}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultCallerSession) DELAY() (*big.Int, error) {
	return _Vault.Contract.DELAY(&_Vault.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address token, address account) view returns(uint256)
func (_Vault *VaultCaller) BalanceOf(opts *bind.CallOpts, token common.Address, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "balanceOf", token, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address token, address account) view returns(uint256)
func (_Vault *VaultSession) BalanceOf(token common.Address, account common.Address) (*big.Int, error) {
	return _Vault.Contract.BalanceOf(&_Vault.CallOpts, token, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address token, address account) view returns(uint256)
func (_Vault *VaultCallerSession) BalanceOf(token common.Address, account common.Address) (*big.Int, error) {
	return _Vault.Contract.BalanceOf(&_Vault.CallOpts, token, account)
}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultCaller) NewAdminTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "newAdminTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultSession) NewAdminTime() (*big.Int, error) {
	return _Vault.Contract.NewAdminTime(&_Vault.CallOpts)
}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultCallerSession) NewAdminTime() (*big.Int, error) {
	return _Vault.Contract.NewAdminTime(&_Vault.CallOpts)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultTransactor) AddSpender(opts *bind.TransactOpts, spender common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "addSpender", spender)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultSession) AddSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.AddSpender(&_Vault.TransactOpts, spender)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultTransactorSession) AddSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.AddSpender(&_Vault.TransactOpts, spender)
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultTransactor) ApplyAdmin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "applyAdmin")
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultSession) ApplyAdmin() (*types.Transaction, error) {
	return _Vault.Contract.ApplyAdmin(&_Vault.TransactOpts)
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultTransactorSession) ApplyAdmin() (*types.Transaction, error) {
	return _Vault.Contract.ApplyAdmin(&_Vault.TransactOpts)
}

// BlockApp is a paid mutator transaction binding the contract method 0x5044a27c.
//
// Solidity: function blockApp(address app) returns()
func (_Vault *VaultTransactor) BlockApp(opts *bind.TransactOpts, app common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "blockApp", app)
}

// BlockApp is a paid mutator transaction binding the contract method 0x5044a27c.
//
// Solidity: function blockApp(address app) returns()
func (_Vault *VaultSession) BlockApp(app common.Address) (*types.Transaction, error) {
	return _Vault.Contract.BlockApp(&_Vault.TransactOpts, app)
}

// BlockApp is a paid mutator transaction binding the contract method 0x5044a27c.
//
// Solidity: function blockApp(address app) returns()
func (_Vault *VaultTransactorSession) BlockApp(app common.Address) (*types.Transaction, error) {
	return _Vault.Contract.BlockApp(&_Vault.TransactOpts, app)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.ChangeAdmin(&_Vault.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.ChangeAdmin(&_Vault.TransactOpts, newAdmin)
}

// CreateApp is a paid mutator transaction binding the contract method 0xf408a7cd.
//
// Solidity: function createApp(address app, address _admin, address[] whitelist) returns()
func (_Vault *VaultTransactor) CreateApp(opts *bind.TransactOpts, app common.Address, _admin common.Address, whitelist []common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "createApp", app, _admin, whitelist)
}

// CreateApp is a paid mutator transaction binding the contract method 0xf408a7cd.
//
// Solidity: function createApp(address app, address _admin, address[] whitelist) returns()
func (_Vault *VaultSession) CreateApp(app common.Address, _admin common.Address, whitelist []common.Address) (*types.Transaction, error) {
	return _Vault.Contract.CreateApp(&_Vault.TransactOpts, app, _admin, whitelist)
}

// CreateApp is a paid mutator transaction binding the contract method 0xf408a7cd.
//
// Solidity: function createApp(address app, address _admin, address[] whitelist) returns()
func (_Vault *VaultTransactorSession) CreateApp(app common.Address, _admin common.Address, whitelist []common.Address) (*types.Transaction, error) {
	return _Vault.Contract.CreateApp(&_Vault.TransactOpts, app, _admin, whitelist)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultTransactor) Deposit(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "deposit", token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultSession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultTransactorSession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, token, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultTransactor) DepositFor(opts *bind.TransactOpts, token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositFor", token, receiver, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultSession) DepositFor(token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.DepositFor(&_Vault.TransactOpts, token, receiver, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultTransactorSession) DepositFor(token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.DepositFor(&_Vault.TransactOpts, token, receiver, amount)
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultTransactor) DepositNative(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositNative")
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultSession) DepositNative() (*types.Transaction, error) {
	return _Vault.Contract.DepositNative(&_Vault.TransactOpts)
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultTransactorSession) DepositNative() (*types.Transaction, error) {
	return _Vault.Contract.DepositNative(&_Vault.TransactOpts)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultTransactor) DepositNativeFor(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositNativeFor", receiver)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultSession) DepositNativeFor(receiver common.Address) (*types.Transaction, error) {
	return _Vault.Contract.DepositNativeFor(&_Vault.TransactOpts, receiver)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultTransactorSession) DepositNativeFor(receiver common.Address) (*types.Transaction, error) {
	return _Vault.Contract.DepositNativeFor(&_Vault.TransactOpts, receiver)
}

// RemoteCall is a paid mutator transaction binding the contract method 0x9bf50723.
//
// Solidity: function remoteCall(uint256 appChain, address app, bytes message, uint64 callGasLimit) returns()
func (_Vault *VaultTransactor) RemoteCall(opts *bind.TransactOpts, appChain *big.Int, app common.Address, message []byte, callGasLimit uint64) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "remoteCall", appChain, app, message, callGasLimit)
}

// RemoteCall is a paid mutator transaction binding the contract method 0x9bf50723.
//
// Solidity: function remoteCall(uint256 appChain, address app, bytes message, uint64 callGasLimit) returns()
func (_Vault *VaultSession) RemoteCall(appChain *big.Int, app common.Address, message []byte, callGasLimit uint64) (*types.Transaction, error) {
	return _Vault.Contract.RemoteCall(&_Vault.TransactOpts, appChain, app, message, callGasLimit)
}

// RemoteCall is a paid mutator transaction binding the contract method 0x9bf50723.
//
// Solidity: function remoteCall(uint256 appChain, address app, bytes message, uint64 callGasLimit) returns()
func (_Vault *VaultTransactorSession) RemoteCall(appChain *big.Int, app common.Address, message []byte, callGasLimit uint64) (*types.Transaction, error) {
	return _Vault.Contract.RemoteCall(&_Vault.TransactOpts, appChain, app, message, callGasLimit)
}

// RemoteCallMultiple is a paid mutator transaction binding the contract method 0x94d6a5b2.
//
// Solidity: function remoteCallMultiple(uint256[] appChains, address[] apps, bytes[] messages, uint64[] callGasLimits) returns()
func (_Vault *VaultTransactor) RemoteCallMultiple(opts *bind.TransactOpts, appChains []*big.Int, apps []common.Address, messages [][]byte, callGasLimits []uint64) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "remoteCallMultiple", appChains, apps, messages, callGasLimits)
}

// RemoteCallMultiple is a paid mutator transaction binding the contract method 0x94d6a5b2.
//
// Solidity: function remoteCallMultiple(uint256[] appChains, address[] apps, bytes[] messages, uint64[] callGasLimits) returns()
func (_Vault *VaultSession) RemoteCallMultiple(appChains []*big.Int, apps []common.Address, messages [][]byte, callGasLimits []uint64) (*types.Transaction, error) {
	return _Vault.Contract.RemoteCallMultiple(&_Vault.TransactOpts, appChains, apps, messages, callGasLimits)
}

// RemoteCallMultiple is a paid mutator transaction binding the contract method 0x94d6a5b2.
//
// Solidity: function remoteCallMultiple(uint256[] appChains, address[] apps, bytes[] messages, uint64[] callGasLimits) returns()
func (_Vault *VaultTransactorSession) RemoteCallMultiple(appChains []*big.Int, apps []common.Address, messages [][]byte, callGasLimits []uint64) (*types.Transaction, error) {
	return _Vault.Contract.RemoteCallMultiple(&_Vault.TransactOpts, appChains, apps, messages, callGasLimits)
}

// RemoteExecute is a paid mutator transaction binding the contract method 0x4eedc86b.
//
// Solidity: function remoteExecute(uint256 callerChain, address caller, address app, uint64 gasLimit, bytes message) returns()
func (_Vault *VaultTransactor) RemoteExecute(opts *bind.TransactOpts, callerChain *big.Int, caller common.Address, app common.Address, gasLimit uint64, message []byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "remoteExecute", callerChain, caller, app, gasLimit, message)
}

// RemoteExecute is a paid mutator transaction binding the contract method 0x4eedc86b.
//
// Solidity: function remoteExecute(uint256 callerChain, address caller, address app, uint64 gasLimit, bytes message) returns()
func (_Vault *VaultSession) RemoteExecute(callerChain *big.Int, caller common.Address, app common.Address, gasLimit uint64, message []byte) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecute(&_Vault.TransactOpts, callerChain, caller, app, gasLimit, message)
}

// RemoteExecute is a paid mutator transaction binding the contract method 0x4eedc86b.
//
// Solidity: function remoteExecute(uint256 callerChain, address caller, address app, uint64 gasLimit, bytes message) returns()
func (_Vault *VaultTransactorSession) RemoteExecute(callerChain *big.Int, caller common.Address, app common.Address, gasLimit uint64, message []byte) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecute(&_Vault.TransactOpts, callerChain, caller, app, gasLimit, message)
}

// RemoteExecuteMultiple is a paid mutator transaction binding the contract method 0x08874d38.
//
// Solidity: function remoteExecuteMultiple(uint256[] callerChains, address[] callers, address[] apps, uint64[] gasLimits, bytes[] messages) returns()
func (_Vault *VaultTransactor) RemoteExecuteMultiple(opts *bind.TransactOpts, callerChains []*big.Int, callers []common.Address, apps []common.Address, gasLimits []uint64, messages [][]byte) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "remoteExecuteMultiple", callerChains, callers, apps, gasLimits, messages)
}

// RemoteExecuteMultiple is a paid mutator transaction binding the contract method 0x08874d38.
//
// Solidity: function remoteExecuteMultiple(uint256[] callerChains, address[] callers, address[] apps, uint64[] gasLimits, bytes[] messages) returns()
func (_Vault *VaultSession) RemoteExecuteMultiple(callerChains []*big.Int, callers []common.Address, apps []common.Address, gasLimits []uint64, messages [][]byte) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecuteMultiple(&_Vault.TransactOpts, callerChains, callers, apps, gasLimits, messages)
}

// RemoteExecuteMultiple is a paid mutator transaction binding the contract method 0x08874d38.
//
// Solidity: function remoteExecuteMultiple(uint256[] callerChains, address[] callers, address[] apps, uint64[] gasLimits, bytes[] messages) returns()
func (_Vault *VaultTransactorSession) RemoteExecuteMultiple(callerChains []*big.Int, callers []common.Address, apps []common.Address, gasLimits []uint64, messages [][]byte) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecuteMultiple(&_Vault.TransactOpts, callerChains, callers, apps, gasLimits, messages)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultTransactor) RemoveSpender(opts *bind.TransactOpts, spender common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "removeSpender", spender)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultSession) RemoveSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.RemoveSpender(&_Vault.TransactOpts, spender)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultTransactorSession) RemoveSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.RemoveSpender(&_Vault.TransactOpts, spender)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) RetryTransfer(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "retryTransfer", token, to, amount)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) RetryTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransfer(&_Vault.TransactOpts, token, to, amount)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) RetryTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransfer(&_Vault.TransactOpts, token, to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) RetryTransferNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "retryTransferNative", to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) RetryTransferNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransferNative(&_Vault.TransactOpts, to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) RetryTransferNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransferNative(&_Vault.TransactOpts, to, amount)
}

// SetAppAnyCaller is a paid mutator transaction binding the contract method 0x679f8e87.
//
// Solidity: function setAppAnyCaller(address app, bool value) returns()
func (_Vault *VaultTransactor) SetAppAnyCaller(opts *bind.TransactOpts, app common.Address, value bool) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setAppAnyCaller", app, value)
}

// SetAppAnyCaller is a paid mutator transaction binding the contract method 0x679f8e87.
//
// Solidity: function setAppAnyCaller(address app, bool value) returns()
func (_Vault *VaultSession) SetAppAnyCaller(app common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppAnyCaller(&_Vault.TransactOpts, app, value)
}

// SetAppAnyCaller is a paid mutator transaction binding the contract method 0x679f8e87.
//
// Solidity: function setAppAnyCaller(address app, bool value) returns()
func (_Vault *VaultTransactorSession) SetAppAnyCaller(app common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppAnyCaller(&_Vault.TransactOpts, app, value)
}

// SetAppWhitelist is a paid mutator transaction binding the contract method 0x9cd35f49.
//
// Solidity: function setAppWhitelist(address app, address[] whitelist, bool value) returns()
func (_Vault *VaultTransactor) SetAppWhitelist(opts *bind.TransactOpts, app common.Address, whitelist []common.Address, value bool) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setAppWhitelist", app, whitelist, value)
}

// SetAppWhitelist is a paid mutator transaction binding the contract method 0x9cd35f49.
//
// Solidity: function setAppWhitelist(address app, address[] whitelist, bool value) returns()
func (_Vault *VaultSession) SetAppWhitelist(app common.Address, whitelist []common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppWhitelist(&_Vault.TransactOpts, app, whitelist, value)
}

// SetAppWhitelist is a paid mutator transaction binding the contract method 0x9cd35f49.
//
// Solidity: function setAppWhitelist(address app, address[] whitelist, bool value) returns()
func (_Vault *VaultTransactorSession) SetAppWhitelist(app common.Address, whitelist []common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppWhitelist(&_Vault.TransactOpts, app, whitelist, value)
}

// SetGlobalCommission is a paid mutator transaction binding the contract method 0x7250c16c.
//
// Solidity: function setGlobalCommission(uint256 c) returns()
func (_Vault *VaultTransactor) SetGlobalCommission(opts *bind.TransactOpts, c *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setGlobalCommission", c)
}

// SetGlobalCommission is a paid mutator transaction binding the contract method 0x7250c16c.
//
// Solidity: function setGlobalCommission(uint256 c) returns()
func (_Vault *VaultSession) SetGlobalCommission(c *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.SetGlobalCommission(&_Vault.TransactOpts, c)
}

// SetGlobalCommission is a paid mutator transaction binding the contract method 0x7250c16c.
//
// Solidity: function setGlobalCommission(uint256 c) returns()
func (_Vault *VaultTransactorSession) SetGlobalCommission(c *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.SetGlobalCommission(&_Vault.TransactOpts, c)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultTransactor) SetNotPausedChain(opts *bind.TransactOpts, chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setNotPausedChain", chain, state)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultSession) SetNotPausedChain(chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.Contract.SetNotPausedChain(&_Vault.TransactOpts, chain, state)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultTransactorSession) SetNotPausedChain(chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.Contract.SetNotPausedChain(&_Vault.TransactOpts, chain, state)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferIn(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferIn", token, to, amount)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferIn(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferIn(&_Vault.TransactOpts, token, to, amount)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferIn(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferIn(&_Vault.TransactOpts, token, to, amount)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactor) TransferInMultiple(opts *bind.TransactOpts, tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferInMultiple", tokens, tos, amounts)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultSession) TransferInMultiple(tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInMultiple(&_Vault.TransactOpts, tokens, tos, amounts)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactorSession) TransferInMultiple(tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInMultiple(&_Vault.TransactOpts, tokens, tos, amounts)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferInNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferInNative", to, amount)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferInNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInNative(&_Vault.TransactOpts, to, amount)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferInNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInNative(&_Vault.TransactOpts, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferOut(opts *bind.TransactOpts, token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOut", token, dstChain, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferOut(token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOut(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferOut(token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOut(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutMultiple is a paid mutator transaction binding the contract method 0x4807e47c.
//
// Solidity: function transferOutMultiple(address[] tokens, uint256[] dstChains, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactor) TransferOutMultiple(opts *bind.TransactOpts, tokens []common.Address, dstChains []*big.Int, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutMultiple", tokens, dstChains, tos, amounts)
}

// TransferOutMultiple is a paid mutator transaction binding the contract method 0x4807e47c.
//
// Solidity: function transferOutMultiple(address[] tokens, uint256[] dstChains, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultSession) TransferOutMultiple(tokens []common.Address, dstChains []*big.Int, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// TransferOutMultiple is a paid mutator transaction binding the contract method 0x4807e47c.
//
// Solidity: function transferOutMultiple(address[] tokens, uint256[] dstChains, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactorSession) TransferOutMultiple(tokens []common.Address, dstChains []*big.Int, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultTransactor) TransferOutNative(opts *bind.TransactOpts, to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNative", to, dstChain)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultSession) TransferOutNative(to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNative(&_Vault.TransactOpts, to, dstChain)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultTransactorSession) TransferOutNative(to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNative(&_Vault.TransactOpts, to, dstChain)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferOutNonEvm(opts *bind.TransactOpts, token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNonEvm", token, dstChain, to, amount)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultSession) TransferOutNonEvm(token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvm(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferOutNonEvm(token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvm(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutNonEvmMultiple is a paid mutator transaction binding the contract method 0x468efee8.
//
// Solidity: function transferOutNonEvmMultiple(address[] tokens, uint256[] dstChains, string[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactor) TransferOutNonEvmMultiple(opts *bind.TransactOpts, tokens []common.Address, dstChains []*big.Int, tos []string, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNonEvmMultiple", tokens, dstChains, tos, amounts)
}

// TransferOutNonEvmMultiple is a paid mutator transaction binding the contract method 0x468efee8.
//
// Solidity: function transferOutNonEvmMultiple(address[] tokens, uint256[] dstChains, string[] tos, uint256[] amounts) returns()
func (_Vault *VaultSession) TransferOutNonEvmMultiple(tokens []common.Address, dstChains []*big.Int, tos []string, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvmMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// TransferOutNonEvmMultiple is a paid mutator transaction binding the contract method 0x468efee8.
//
// Solidity: function transferOutNonEvmMultiple(address[] tokens, uint256[] dstChains, string[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactorSession) TransferOutNonEvmMultiple(tokens []common.Address, dstChains []*big.Int, tos []string, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvmMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// UpdateAppAdmin is a paid mutator transaction binding the contract method 0x125dabb0.
//
// Solidity: function updateAppAdmin(address app, address newAdmin) returns()
func (_Vault *VaultTransactor) UpdateAppAdmin(opts *bind.TransactOpts, app common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "updateAppAdmin", app, newAdmin)
}

// UpdateAppAdmin is a paid mutator transaction binding the contract method 0x125dabb0.
//
// Solidity: function updateAppAdmin(address app, address newAdmin) returns()
func (_Vault *VaultSession) UpdateAppAdmin(app common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.UpdateAppAdmin(&_Vault.TransactOpts, app, newAdmin)
}

// UpdateAppAdmin is a paid mutator transaction binding the contract method 0x125dabb0.
//
// Solidity: function updateAppAdmin(address app, address newAdmin) returns()
func (_Vault *VaultTransactorSession) UpdateAppAdmin(app common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.UpdateAppAdmin(&_Vault.TransactOpts, app, newAdmin)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) Withdraw(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "withdraw", token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, token, to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) WithdrawNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "withdrawNative", to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) WithdrawNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.WithdrawNative(&_Vault.TransactOpts, to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) WithdrawNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.WithdrawNative(&_Vault.TransactOpts, to, amount)
}

// VaultCode501Iterator is returned from FilterCode501 and is used to iterate over the raw logs and unpacked data for Code501 events raised by the Vault contract.
type VaultCode501Iterator struct {
	Event *VaultCode501 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultCode501Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultCode501)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultCode501)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultCode501Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultCode501Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultCode501 represents a Code501 event raised by the Vault contract.
type VaultCode501 struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCode501 is a free log retrieval operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) FilterCode501(opts *bind.FilterOpts) (*VaultCode501Iterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Code501")
	if err != nil {
		return nil, err
	}
	return &VaultCode501Iterator{contract: _Vault.contract, event: "Code501", logs: logs, sub: sub}, nil
}

// WatchCode501 is a free log subscription operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) WatchCode501(opts *bind.WatchOpts, sink chan<- *VaultCode501) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Code501")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultCode501)
				if err := _Vault.contract.UnpackLog(event, "Code501", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCode501 is a log parse operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) ParseCode501(log types.Log) (*VaultCode501, error) {
	event := new(VaultCode501)
	if err := _Vault.contract.UnpackLog(event, "Code501", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultCode502Iterator is returned from FilterCode502 and is used to iterate over the raw logs and unpacked data for Code502 events raised by the Vault contract.
type VaultCode502Iterator struct {
	Event *VaultCode502 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultCode502Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultCode502)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultCode502)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultCode502Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultCode502Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultCode502 represents a Code502 event raised by the Vault contract.
type VaultCode502 struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCode502 is a free log retrieval operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) FilterCode502(opts *bind.FilterOpts) (*VaultCode502Iterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Code502")
	if err != nil {
		return nil, err
	}
	return &VaultCode502Iterator{contract: _Vault.contract, event: "Code502", logs: logs, sub: sub}, nil
}

// WatchCode502 is a free log subscription operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) WatchCode502(opts *bind.WatchOpts, sink chan<- *VaultCode502) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Code502")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultCode502)
				if err := _Vault.contract.UnpackLog(event, "Code502", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCode502 is a log parse operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) ParseCode502(log types.Log) (*VaultCode502, error) {
	event := new(VaultCode502)
	if err := _Vault.contract.UnpackLog(event, "Code502", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultRemoteExecutedIterator is returned from FilterRemoteExecuted and is used to iterate over the raw logs and unpacked data for RemoteExecuted events raised by the Vault contract.
type VaultRemoteExecutedIterator struct {
	Event *VaultRemoteExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultRemoteExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultRemoteExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultRemoteExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultRemoteExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultRemoteExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultRemoteExecuted represents a RemoteExecuted event raised by the Vault contract.
type VaultRemoteExecuted struct {
	Code      uint8
	Exception []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoteExecuted is a free log retrieval operation binding the contract event 0x784fc316e5b708d9d87522371568d63c072c60efc538e8998bf4c87a78e3f53c.
//
// Solidity: event remoteExecuted(uint8 code, bytes exception)
func (_Vault *VaultFilterer) FilterRemoteExecuted(opts *bind.FilterOpts) (*VaultRemoteExecutedIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "remoteExecuted")
	if err != nil {
		return nil, err
	}
	return &VaultRemoteExecutedIterator{contract: _Vault.contract, event: "remoteExecuted", logs: logs, sub: sub}, nil
}

// WatchRemoteExecuted is a free log subscription operation binding the contract event 0x784fc316e5b708d9d87522371568d63c072c60efc538e8998bf4c87a78e3f53c.
//
// Solidity: event remoteExecuted(uint8 code, bytes exception)
func (_Vault *VaultFilterer) WatchRemoteExecuted(opts *bind.WatchOpts, sink chan<- *VaultRemoteExecuted) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "remoteExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultRemoteExecuted)
				if err := _Vault.contract.UnpackLog(event, "remoteExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoteExecuted is a log parse operation binding the contract event 0x784fc316e5b708d9d87522371568d63c072c60efc538e8998bf4c87a78e3f53c.
//
// Solidity: event remoteExecuted(uint8 code, bytes exception)
func (_Vault *VaultFilterer) ParseRemoteExecuted(log types.Log) (*VaultRemoteExecuted, error) {
	event := new(VaultRemoteExecuted)
	if err := _Vault.contract.UnpackLog(event, "remoteExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
